import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from lifelines import CoxPHFitter
from tensorflow.keras.layers import Input, Dense
from tensorflow.keras.models import Model

# ======================
# 1. Synthetic Data Generation
# ======================
def generate_synthetic_data(num_series=100, length=500):
    """Generate time series with 3 hidden regimes"""
        time = np.linspace(0, 20, length)
            regimes = [
                    np.sin(time) + np.random.normal(0, 0.1, length),
                            np.cos(time) + np.random.normal(0, 0.1, length),
                                    time % 10 + np.random.normal(0, 0.5, length)
                                        ]
                                            
                                                data = []
                                                    for _ in range(num_series):
                                                            # Randomly switch between regimes
                                                                    series = []
                                                                            current_regime = 0
                                                                                    for t in range(length):
                                                                                                if t % 50 == 0:
                                                                                                                current_regime = np.random.choice([0, 1, 2])
                                                                                                                            series.append(regimes[current_regime][t])
                                                                                                                                    data.append(series)
                                                                                                                                        
                                                                                                                                            return pd.DataFrame(data).T

                                                                                                                                            # Generate synthetic data
                                                                                                                                            data = generate_synthetic_data()
                                                                                                                                            print("Generated data shape:", data.shape)

                                                                                                                                            # ======================
                                                                                                                                            # 2. Sliding Window Processing
                                                                                                                                            # ======================
                                                                                                                                            def create_sliding_windows(data, window_size=50):
                                                                                                                                                """Create overlapping windows of time series"""
                                                                                                                                                    windows = []
                                                                                                                                                        for i in range(data.shape[0] - window_size):
                                                                                                                                                                windows.append(data.iloc[i:i+window_size].values)
                                                                                                                                                                    return np.array(windows)

                                                                                                                                                                    windows = create_sliding_windows(data)
                                                                                                                                                                    print("Window data shape:", windows.shape)

                                                                                                                                                                    # ======================
                                                                                                                                                                    # 3. Network Construction
                                                                                                                                                                    # ======================
                                                                                                                                                                    def build_similarity_network(windows):
                                                                                                                                                                        """Build similarity network using cosine similarity"""
                                                                                                                                                                            flat_windows = windows.reshape(windows.shape[0], -1)
                                                                                                                                                                                similarity_matrix = cosine_similarity(flat_windows)
                                                                                                                                                                                    return similarity_matrix

                                                                                                                                                                                    network = build_similarity_network(windows)
                                                                                                                                                                                    print("Network matrix shape:", network.shape)

                                                                                                                                                                                    # ======================
                                                                                                                                                                                    # 4. Network Clustering (Simplified)
                                                                                                                                                                                    # ======================
                                                                                                                                                                                    def detect_regimes(similarity_matrix, n_clusters=3):
                                                                                                                                                                                        """Simple threshold-based clustering"""
                                                                                                                                                                                            threshold = np.percentile(similarity_matrix, 95)
                                                                                                                                                                                                clusters = []
                                                                                                                                                                                                    visited = set()
                                                                                                                                                                                                        
                                                                                                                                                                                                            for i in range(similarity_matrix.shape[0]):
                                                                                                                                                                                                                    if i not in visited:
                                                                                                                                                                                                                                cluster = np.where(similarity_matrix[i] > threshold)[0]
                                                                                                                                                                                                                                            clusters.append(cluster)
                                                                                                                                                                                                                                                        visited.update(cluster)
                                                                                                                                                                                                                                                            return clusters[:n_clusters]  # Keep top 3 clusters

                                                                                                                                                                                                                                                            clusters = detect_regimes(network)
                                                                                                                                                                                                                                                            print(f"Detected {len(clusters)} regimes")

                                                                                                                                                                                                                                                            # ======================
                                                                                                                                                                                                                                                            # 5. Mapping Grid Construction
                                                                                                                                                                                                                                                            # ======================
                                                                                                                                                                                                                                                            def build_mapping_grid(clusters, num_windows):
                                                                                                                                                                                                                                                                """Create regime presence grid"""
                                                                                                                                                                                                                                                                    grid = np.zeros((len(clusters), num_windows))
                                                                                                                                                                                                                                                                        for i, cluster in enumerate(clusters):
                                                                                                                                                                                                                                                                                for window_idx in cluster:
                                                                                                                                                                                                                                                                                            if window_idx < num_windows:
                                                                                                                                                                                                                                                                                                            grid[i, window_idx] = 1
                                                                                                                                                                                                                                                                                                                return grid

                                                                                                                                                                                                                                                                                                                mapping_grid = build_mapping_grid(clusters, windows.shape[0])
                                                                                                                                                                                                                                                                                                                print("Mapping grid shape:", mapping_grid.shape)

                                                                                                                                                                                                                                                                                                                # ======================
                                                                                                                                                                                                                                                                                                                # 6. Feature Learning
                                                                                                                                                                                                                                                                                                                # ======================
                                                                                                                                                                                                                                                                                                                def create_autoencoder(input_dim):
                                                                                                                                                                                                                                                                                                                    """Build simple autoencoder for feature extraction"""
                                                                                                                                                                                                                                                                                                                        input_layer = Input(shape=(input_dim,))
                                                                                                                                                                                                                                                                                                                            encoded = Dense(8, activation='relu')(input_layer)
                                                                                                                                                                                                                                                                                                                                decoded = Dense(input_dim, activation='sigmoid')(encoded)
                                                                                                                                                                                                                                                                                                                                    autoencoder = Model(input_layer, decoded)
                                                                                                                                                                                                                                                                                                                                        autoencoder.compile(optimizer='adam', loss='mse')
                                                                                                                                                                                                                                                                                                                                            return autoencoder

                                                                                                                                                                                                                                                                                                                                            # Train autoencoder
                                                                                                                                                                                                                                                                                                                                            autoencoder = create_autoencoder(mapping_grid.shape[1])
                                                                                                                                                                                                                                                                                                                                            autoencoder.fit(mapping_grid, mapping_grid,
                                                                                                                                                                                                                                                                                                                                                           epochs=50,
                                                                                                                                                                                                                                                                                                                                                                          batch_size=32,
                                                                                                                                                                                                                                                                                                                                                                                         shuffle=True)

                                                                                                                                                                                                                                                                                                                                                                                         # Extract features
                                                                                                                                                                                                                                                                                                                                                                                         encoder = Model(inputs=autoencoder.input, outputs=autoencoder.layers[1].output)
                                                                                                                                                                                                                                                                                                                                                                                         features = encoder.predict(mapping_grid)
                                                                                                                                                                                                                                                                                                                                                                                         print("Learned features shape:", features.shape)

                                                                                                                                                                                                                                                                                                                                                                                         # ======================
                                                                                                                                                                                                                                                                                                                                                                                         # 7. Survival Analysis
                                                                                                                                                                                                                                                                                                                                                                                         # ======================
                                                                                                                                                                                                                                                                                                                                                                                         def calculate_survival(features):
                                                                                                                                                                                                                                                                                                                                                                                             """Calculate regime survival using Cox regression"""
                                                                                                                                                                                                                                                                                                                                                                                                 # Create synthetic survival data
                                                                                                                                                                                                                                                                                                                                                                                                     durations = np.random.randint(1, 100, size=features.shape[0])
                                                                                                                                                                                                                                                                                                                                                                                                         events = np.random.randint(0, 2, size=features.shape[0])
                                                                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                                                                                 df = pd.DataFrame(features)
                                                                                                                                                                                                                                                                                                                                                                                                                     df['duration'] = durations
                                                                                                                                                                                                                                                                                                                                                                                                                         df['event'] = events
                                                                                                                                                                                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                                                                                                 cph = CoxPHFitter()
                                                                                                                                                                                                                                                                                                                                                                                                                                     cph.fit(df, duration_col='duration', event_col='event')
                                                                                                                                                                                                                                                                                                                                                                                                                                         return cph

                                                                                                                                                                                                                                                                                                                                                                                                                                         cph_model = calculate_survival(features)
                                                                                                                                                                                                                                                                                                                                                                                                                                         cph_model.print_summary()

                                                                                                                                                                                                                                                                                                                                                                                                                                         # ======================
                                                                                                                                                                                                                                                                                                                                                                                                                                         # 8. Forecasting
                                                                                                                                                                                                                                                                                                                                                                                                                                         # ======================
                                                                                                                                                                                                                                                                                                                                                                                                                                         def predict_next_regime(current_state, transition_matrix):
                                                                                                                                                                                                                                                                                                                                                                                                                                             """Predict next regime using Markov transition"""
                                                                                                                                                                                                                                                                                                                                                                                                                                                 return np.argmax(transition_matrix[current_state])

                                                                                                                                                                                                                                                                                                                                                                                                                                                 # Calculate transition matrix
                                                                                                                                                                                                                                                                                                                                                                                                                                                 transition_matrix = np.zeros((len(clusters), len(clusters)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                 for i in range(mapping_grid.shape[1]-1):
                                                                                                                                                                                                                                                                                                                                                                                                                                                     current = np.argmax(mapping_grid[:, i])
                                                                                                                                                                                                                                                                                                                                                                                                                                                         next_ = np.argmax(mapping_grid[:, i+1])
                                                                                                                                                                                                                                                                                                                                                                                                                                                             transition_matrix[current, next_] += 1

                                                                                                                                                                                                                                                                                                                                                                                                                                                             # Normalize transition matrix
                                                                                                                                                                                                                                                                                                                                                                                                                                                             transition_matrix = transition_matrix / transition_matrix.sum(axis=1, keepdims=True)

                                                                                                                                                                                                                                                                                                                                                                                                                                                             # Predict next regime
                                                                                                                                                                                                                                                                                                                                                                                                                                                             current_regime = np.argmax(mapping_grid[:, -1])
                                                                                                                                                                                                                                                                                                                                                                                                                                                             predicted_regime = predict_next_regime(current_regime, transition_matrix)
                                                                                                                                                                                                                                                                                                                                                                                                                                                             print(f"Current regime: {current_regime}, Predicted next regime: {predicted_regime}")